expression ::= relation
             | terminalExpression
             | expression "[" expression "]"

relation ::= expression infixOperator expression
           | expression "." expression
           | expression "(" expressionList ")"

compositeExpression ::= "{" expressions "}"

terminalExpression ::= literal

expressionList ::= expression | expression "," expressionList

expressions ::= expression | expression expressions

definition ::= name ":" type
             | name "=" expression

// Root items
literal ::= number
          | '"' string '"'

infixOperator ::= operatorSymbol | operatorSymbol operatorSymbol

operatorSymbol ::= NOT grammarSymbol

grammarSymbol ::= "(" | ")" | "{" | "}" | "." | "," | "[" | "]"


////////////////////////////////////////////////////////////////
Integer = {
    > (Other) : Boolean
}

Boolean = True | False

Nullable(Type) = Type | Null