expression ::= relation
             | terminalExpression
// Not sure about how this fits into the grammar
//             | expression "[" expression "]"

relation ::= expression infixOperator expression
           | expression "." expression
           | expression "(" expressionList ")"

compositeExpression ::= "{" specificationList "}"

terminalExpression ::= literal

expressionList ::= expression | expression "," expressionList

identity ::= name "(" specificationList ")"

specification ::= identity expression
                | expression

specificationList ::= specification | specification "," specificationList

// Root items
literal ::= number
          | '"' string '"'

infixOperator ::= identifierSymbol | identifierSymbol identifierSymbol

identifierSymbol ::= NOT grammarSymbol

grammarSymbol ::= "(" | ")" | "{" | "}" | "." | "," | "[" | "]"


////////////////////////////////////////////////////////////////
Integer = {
    > (Other) : Boolean
}

Boolean = True | False

Nullable(Type) = Type | Null