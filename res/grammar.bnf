statement ::= declaration parameterization? "=" expression ";"

expression ::= compound_expression
             | enum_list

value_expression ::= value_expression symbol value_expression
                   | value_expression ("." identifier)? application?
                   | identifier
                   | number
                   | "(" value_expression ")"

parameter ::= label ":" type | type
declaration ::= label ":" type | label

type ::= identifier refinement?

refinement ::= "[" refinement_list "]"
refinement_list ::= expression_list // that must typecheck to bool


compound_expression ::= "{" statement_list "}"
statement_list ::= statement*

parameterization ::= "(" parameter_list ")"
parameter_list ::= parameter ("," parameter)*

application ::= "(" expression_list ")"
expression_list ::= expression ("," expression)*

enum_list ::= ("|" label)+

identifier ::= label ("." label)*

label ::= // Any string of letters

symbol ::= // Any non-alphanumeric characters

number ::= // Any token beginning with a numeric character
